{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11362926,"sourceType":"datasetVersion","datasetId":7112030}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"id":"46009c08-0b93-4f81-b29f-5cb7fab4a0bf","cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:55.878429Z","iopub.execute_input":"2025-04-11T05:53:55.879617Z","iopub.status.idle":"2025-04-11T05:53:55.884062Z","shell.execute_reply.started":"2025-04-11T05:53:55.879565Z","shell.execute_reply":"2025-04-11T05:53:55.883085Z"}},"outputs":[],"execution_count":10},{"id":"f1b874c1-6853-4cb1-80af-ff6f5276ce90","cell_type":"code","source":"dfMovie = pd.read_csv('/kaggle/input/movies/movies.csv')\ndfRating = pd.read_csv('/kaggle/input/movies/ratings.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:55.885825Z","iopub.execute_input":"2025-04-11T05:53:55.886336Z","iopub.status.idle":"2025-04-11T05:53:55.985546Z","shell.execute_reply.started":"2025-04-11T05:53:55.886298Z","shell.execute_reply":"2025-04-11T05:53:55.984536Z"}},"outputs":[],"execution_count":11},{"id":"77243458-11ef-4011-bb8d-ad108faed20f","cell_type":"code","source":"df=pd.merge(dfRating,dfMovie, how='left',on='movieId')\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:55.986618Z","iopub.execute_input":"2025-04-11T05:53:55.986949Z","iopub.status.idle":"2025-04-11T05:53:56.056233Z","shell.execute_reply.started":"2025-04-11T05:53:55.986926Z","shell.execute_reply":"2025-04-11T05:53:56.055170Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"   userId  movieId  rating   timestamp  \\\n0       1       16     4.0  1217897793   \n1       1       24     1.5  1217895807   \n2       1       32     4.0  1217896246   \n3       1       47     4.0  1217896556   \n4       1       50     4.0  1217896523   \n\n                                       title                   genres  \n0                              Casino (1995)              Crime|Drama  \n1                              Powder (1995)             Drama|Sci-Fi  \n2  Twelve Monkeys (a.k.a. 12 Monkeys) (1995)  Mystery|Sci-Fi|Thriller  \n3                Seven (a.k.a. Se7en) (1995)         Mystery|Thriller  \n4                 Usual Suspects, The (1995)   Crime|Mystery|Thriller  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>16</td>\n      <td>4.0</td>\n      <td>1217897793</td>\n      <td>Casino (1995)</td>\n      <td>Crime|Drama</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>24</td>\n      <td>1.5</td>\n      <td>1217895807</td>\n      <td>Powder (1995)</td>\n      <td>Drama|Sci-Fi</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>32</td>\n      <td>4.0</td>\n      <td>1217896246</td>\n      <td>Twelve Monkeys (a.k.a. 12 Monkeys) (1995)</td>\n      <td>Mystery|Sci-Fi|Thriller</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>4.0</td>\n      <td>1217896556</td>\n      <td>Seven (a.k.a. Se7en) (1995)</td>\n      <td>Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>4.0</td>\n      <td>1217896523</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>Crime|Mystery|Thriller</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"id":"3a4a713b-9d3f-43a8-b20e-06462c97cc48","cell_type":"code","source":"df.to_csv('final.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.058233Z","iopub.execute_input":"2025-04-11T05:53:56.058530Z","iopub.status.idle":"2025-04-11T05:53:56.432032Z","shell.execute_reply.started":"2025-04-11T05:53:56.058508Z","shell.execute_reply":"2025-04-11T05:53:56.431220Z"}},"outputs":[],"execution_count":13},{"id":"42d6c48f-12a2-42d1-8a63-ea361404624f","cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.432936Z","iopub.execute_input":"2025-04-11T05:53:56.433203Z","iopub.status.idle":"2025-04-11T05:53:56.471078Z","shell.execute_reply.started":"2025-04-11T05:53:56.433181Z","shell.execute_reply":"2025-04-11T05:53:56.470150Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"              userId        movieId         rating     timestamp\ncount  105339.000000  105339.000000  105339.000000  1.053390e+05\nmean      364.924539   13381.312477       3.516850  1.130424e+09\nstd       197.486905   26170.456869       1.044872  1.802660e+08\nmin         1.000000       1.000000       0.500000  8.285650e+08\n25%       192.000000    1073.000000       3.000000  9.711008e+08\n50%       383.000000    2497.000000       3.500000  1.115154e+09\n75%       557.000000    5991.000000       4.000000  1.275496e+09\nmax       668.000000  149532.000000       5.000000  1.452405e+09","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>105339.000000</td>\n      <td>105339.000000</td>\n      <td>105339.000000</td>\n      <td>1.053390e+05</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>364.924539</td>\n      <td>13381.312477</td>\n      <td>3.516850</td>\n      <td>1.130424e+09</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>197.486905</td>\n      <td>26170.456869</td>\n      <td>1.044872</td>\n      <td>1.802660e+08</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>8.285650e+08</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>192.000000</td>\n      <td>1073.000000</td>\n      <td>3.000000</td>\n      <td>9.711008e+08</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>383.000000</td>\n      <td>2497.000000</td>\n      <td>3.500000</td>\n      <td>1.115154e+09</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>557.000000</td>\n      <td>5991.000000</td>\n      <td>4.000000</td>\n      <td>1.275496e+09</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>668.000000</td>\n      <td>149532.000000</td>\n      <td>5.000000</td>\n      <td>1.452405e+09</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":14},{"id":"0af8799d-41e7-4dc0-b89e-32cfbcd6f45f","cell_type":"code","source":"df.drop('timestamp', axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.472068Z","iopub.execute_input":"2025-04-11T05:53:56.472339Z","iopub.status.idle":"2025-04-11T05:53:56.489055Z","shell.execute_reply.started":"2025-04-11T05:53:56.472317Z","shell.execute_reply":"2025-04-11T05:53:56.488100Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"        userId  movieId  rating                                      title  \\\n0            1       16     4.0                              Casino (1995)   \n1            1       24     1.5                              Powder (1995)   \n2            1       32     4.0  Twelve Monkeys (a.k.a. 12 Monkeys) (1995)   \n3            1       47     4.0                Seven (a.k.a. Se7en) (1995)   \n4            1       50     4.0                 Usual Suspects, The (1995)   \n...        ...      ...     ...                                        ...   \n105334     668   142488     4.0                           Spotlight (2015)   \n105335     668   142507     3.5                      Pawn Sacrifice (2015)   \n105336     668   143385     4.0                     Bridge of Spies (2015)   \n105337     668   144976     2.5                       Bone Tomahawk (2015)   \n105338     668   148626     4.5                       The Big Short (2015)   \n\n                         genres  \n0                   Crime|Drama  \n1                  Drama|Sci-Fi  \n2       Mystery|Sci-Fi|Thriller  \n3              Mystery|Thriller  \n4        Crime|Mystery|Thriller  \n...                         ...  \n105334                 Thriller  \n105335                    Drama  \n105336           Drama|Thriller  \n105337           Horror|Western  \n105338                    Drama  \n\n[105339 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>16</td>\n      <td>4.0</td>\n      <td>Casino (1995)</td>\n      <td>Crime|Drama</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>24</td>\n      <td>1.5</td>\n      <td>Powder (1995)</td>\n      <td>Drama|Sci-Fi</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>32</td>\n      <td>4.0</td>\n      <td>Twelve Monkeys (a.k.a. 12 Monkeys) (1995)</td>\n      <td>Mystery|Sci-Fi|Thriller</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>4.0</td>\n      <td>Seven (a.k.a. Se7en) (1995)</td>\n      <td>Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>4.0</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>Crime|Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>105334</th>\n      <td>668</td>\n      <td>142488</td>\n      <td>4.0</td>\n      <td>Spotlight (2015)</td>\n      <td>Thriller</td>\n    </tr>\n    <tr>\n      <th>105335</th>\n      <td>668</td>\n      <td>142507</td>\n      <td>3.5</td>\n      <td>Pawn Sacrifice (2015)</td>\n      <td>Drama</td>\n    </tr>\n    <tr>\n      <th>105336</th>\n      <td>668</td>\n      <td>143385</td>\n      <td>4.0</td>\n      <td>Bridge of Spies (2015)</td>\n      <td>Drama|Thriller</td>\n    </tr>\n    <tr>\n      <th>105337</th>\n      <td>668</td>\n      <td>144976</td>\n      <td>2.5</td>\n      <td>Bone Tomahawk (2015)</td>\n      <td>Horror|Western</td>\n    </tr>\n    <tr>\n      <th>105338</th>\n      <td>668</td>\n      <td>148626</td>\n      <td>4.5</td>\n      <td>The Big Short (2015)</td>\n      <td>Drama</td>\n    </tr>\n  </tbody>\n</table>\n<p>105339 rows × 5 columns</p>\n</div>"},"metadata":{}}],"execution_count":15},{"id":"ae74bb6c-fe76-4390-b2ff-143d433c1a7f","cell_type":"code","source":"genres=[]\nfor genre in df.genres:\n    \n    x=genre.split('|')\n    for i in x:\n         if i not in genres:\n            genres.append(str(i))\ngenres=str(genres)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.489931Z","iopub.execute_input":"2025-04-11T05:53:56.490186Z","iopub.status.idle":"2025-04-11T05:53:56.594605Z","shell.execute_reply.started":"2025-04-11T05:53:56.490166Z","shell.execute_reply":"2025-04-11T05:53:56.593639Z"}},"outputs":[],"execution_count":16},{"id":"ae836ef9-f538-4091-a8d9-3816d0ab3211","cell_type":"code","source":"movie_title=[]\nfor title in df.title:\n    movie_title.append(title[0:-7])\nmovie_title=str(movie_title)   ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.595716Z","iopub.execute_input":"2025-04-11T05:53:56.596012Z","iopub.status.idle":"2025-04-11T05:53:56.670369Z","shell.execute_reply.started":"2025-04-11T05:53:56.595989Z","shell.execute_reply":"2025-04-11T05:53:56.669295Z"}},"outputs":[],"execution_count":17},{"id":"4428faa0-93a8-46b2-84eb-47ca5fa37c4d","cell_type":"code","source":"df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.671372Z","iopub.execute_input":"2025-04-11T05:53:56.671703Z","iopub.status.idle":"2025-04-11T05:53:56.685920Z","shell.execute_reply.started":"2025-04-11T05:53:56.671652Z","shell.execute_reply":"2025-04-11T05:53:56.684926Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"        userId  movieId  rating   timestamp  \\\n0            1       16     4.0  1217897793   \n1            1       24     1.5  1217895807   \n2            1       32     4.0  1217896246   \n3            1       47     4.0  1217896556   \n4            1       50     4.0  1217896523   \n...        ...      ...     ...         ...   \n105334     668   142488     4.0  1451535844   \n105335     668   142507     3.5  1451535889   \n105336     668   143385     4.0  1446388585   \n105337     668   144976     2.5  1448656898   \n105338     668   148626     4.5  1451148148   \n\n                                            title                   genres  \n0                                   Casino (1995)              Crime|Drama  \n1                                   Powder (1995)             Drama|Sci-Fi  \n2       Twelve Monkeys (a.k.a. 12 Monkeys) (1995)  Mystery|Sci-Fi|Thriller  \n3                     Seven (a.k.a. Se7en) (1995)         Mystery|Thriller  \n4                      Usual Suspects, The (1995)   Crime|Mystery|Thriller  \n...                                           ...                      ...  \n105334                           Spotlight (2015)                 Thriller  \n105335                      Pawn Sacrifice (2015)                    Drama  \n105336                     Bridge of Spies (2015)           Drama|Thriller  \n105337                       Bone Tomahawk (2015)           Horror|Western  \n105338                       The Big Short (2015)                    Drama  \n\n[105339 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>16</td>\n      <td>4.0</td>\n      <td>1217897793</td>\n      <td>Casino (1995)</td>\n      <td>Crime|Drama</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>24</td>\n      <td>1.5</td>\n      <td>1217895807</td>\n      <td>Powder (1995)</td>\n      <td>Drama|Sci-Fi</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>32</td>\n      <td>4.0</td>\n      <td>1217896246</td>\n      <td>Twelve Monkeys (a.k.a. 12 Monkeys) (1995)</td>\n      <td>Mystery|Sci-Fi|Thriller</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>4.0</td>\n      <td>1217896556</td>\n      <td>Seven (a.k.a. Se7en) (1995)</td>\n      <td>Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>4.0</td>\n      <td>1217896523</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>Crime|Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>105334</th>\n      <td>668</td>\n      <td>142488</td>\n      <td>4.0</td>\n      <td>1451535844</td>\n      <td>Spotlight (2015)</td>\n      <td>Thriller</td>\n    </tr>\n    <tr>\n      <th>105335</th>\n      <td>668</td>\n      <td>142507</td>\n      <td>3.5</td>\n      <td>1451535889</td>\n      <td>Pawn Sacrifice (2015)</td>\n      <td>Drama</td>\n    </tr>\n    <tr>\n      <th>105336</th>\n      <td>668</td>\n      <td>143385</td>\n      <td>4.0</td>\n      <td>1446388585</td>\n      <td>Bridge of Spies (2015)</td>\n      <td>Drama|Thriller</td>\n    </tr>\n    <tr>\n      <th>105337</th>\n      <td>668</td>\n      <td>144976</td>\n      <td>2.5</td>\n      <td>1448656898</td>\n      <td>Bone Tomahawk (2015)</td>\n      <td>Horror|Western</td>\n    </tr>\n    <tr>\n      <th>105338</th>\n      <td>668</td>\n      <td>148626</td>\n      <td>4.5</td>\n      <td>1451148148</td>\n      <td>The Big Short (2015)</td>\n      <td>Drama</td>\n    </tr>\n  </tbody>\n</table>\n<p>105339 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":18},{"id":"3150fa8e-d86a-4582-b170-91ac61a11eaf","cell_type":"markdown","source":"Input: Genre (g) : Comedy Minimum reviews threshold (t) : 100 Num recommendations (N) : 5 ","metadata":{}},{"id":"bc13a434-57bd-4480-9535-c4f745f4d12c","cell_type":"code","source":"def count_review(title):\n    num_of_review = df[df['title'] == title].shape[0]\n    return num_of_review","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.689126Z","iopub.execute_input":"2025-04-11T05:53:56.689418Z","iopub.status.idle":"2025-04-11T05:53:56.707155Z","shell.execute_reply.started":"2025-04-11T05:53:56.689391Z","shell.execute_reply":"2025-04-11T05:53:56.706101Z"}},"outputs":[],"execution_count":19},{"id":"10c86917-2267-4ce6-b109-0d7de543e484","cell_type":"code","source":"def popularity_based_recommender(df, genre, min_ratings=100, top_n=5):\n    # Step 1: Filter movies by genre\n    genre_movies = df[df['genres'].str.contains(genre, case=False, na=False)]\n\n    # Step 2: Group by title, calculate rating count and average rating\n    grouped = genre_movies.groupby('title').agg({\n        'rating': ['count', 'mean']\n    }).reset_index()\n\n    # Rename columns\n    grouped.columns = ['title', 'rating_count', 'avg_rating']\n\n    # Step 3: Filter by minimum ratings threshold\n    filtered = grouped[grouped['rating_count'] >= min_ratings]\n\n    # Step 4: Sort by average rating (descending) and return top N\n    top_movies = filtered.sort_values(by='avg_rating', ascending=False).head(top_n)\n\n    return top_movies\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.708196Z","iopub.execute_input":"2025-04-11T05:53:56.708504Z","iopub.status.idle":"2025-04-11T05:53:56.728423Z","shell.execute_reply.started":"2025-04-11T05:53:56.708482Z","shell.execute_reply":"2025-04-11T05:53:56.727415Z"}},"outputs":[],"execution_count":20},{"id":"dbd06966-ba44-4a77-b13b-d626c3ce635b","cell_type":"code","source":"# Example usage:\ngenre = input('Enter a genre: ')\nmin_ratings = 100\ntop_n = 5\npopularity_based_recommender(df, genre, min_ratings, top_n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:53:56.729401Z","iopub.execute_input":"2025-04-11T05:53:56.729837Z","iopub.status.idle":"2025-04-11T05:54:03.120781Z","shell.execute_reply.started":"2025-04-11T05:53:56.729808Z","shell.execute_reply":"2025-04-11T05:54:03.119744Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"Enter a genre:  Comedy\n"},{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"                                       title  rating_count  avg_rating\n2093  Monty Python and the Holy Grail (1975)           154    4.301948\n995                             Fargo (1996)           201    4.271144\n2498              Princess Bride, The (1987)           171    4.163743\n2523                     Pulp Fiction (1994)           325    4.160000\n1069                     Forrest Gump (1994)           311    4.138264","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>rating_count</th>\n      <th>avg_rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2093</th>\n      <td>Monty Python and the Holy Grail (1975)</td>\n      <td>154</td>\n      <td>4.301948</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>Fargo (1996)</td>\n      <td>201</td>\n      <td>4.271144</td>\n    </tr>\n    <tr>\n      <th>2498</th>\n      <td>Princess Bride, The (1987)</td>\n      <td>171</td>\n      <td>4.163743</td>\n    </tr>\n    <tr>\n      <th>2523</th>\n      <td>Pulp Fiction (1994)</td>\n      <td>325</td>\n      <td>4.160000</td>\n    </tr>\n    <tr>\n      <th>1069</th>\n      <td>Forrest Gump (1994)</td>\n      <td>311</td>\n      <td>4.138264</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":21},{"id":"ea270004-659b-4c11-9e64-22481c3c4628","cell_type":"code","source":"from sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.121803Z","iopub.execute_input":"2025-04-11T05:54:03.122094Z","iopub.status.idle":"2025-04-11T05:54:03.146639Z","shell.execute_reply.started":"2025-04-11T05:54:03.122072Z","shell.execute_reply":"2025-04-11T05:54:03.145522Z"}},"outputs":[],"execution_count":22},{"id":"e98a1c3f-9522-45de-8d9d-a14e389858b7","cell_type":"code","source":"#count_vec = CountVectorizer(tokenizer=lambda x: x.split('|'), token_pattern=None)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.147698Z","iopub.execute_input":"2025-04-11T05:54:03.147970Z","iopub.status.idle":"2025-04-11T05:54:03.152228Z","shell.execute_reply.started":"2025-04-11T05:54:03.147949Z","shell.execute_reply":"2025-04-11T05:54:03.151001Z"}},"outputs":[],"execution_count":23},{"id":"fe10ffba-76c7-40bc-9d12-19803d40a4ff","cell_type":"code","source":"from sklearn.metrics.pairwise import cosine_similarity\nfrom scipy.sparse import csr_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.153239Z","iopub.execute_input":"2025-04-11T05:54:03.153576Z","iopub.status.idle":"2025-04-11T05:54:03.173380Z","shell.execute_reply.started":"2025-04-11T05:54:03.153547Z","shell.execute_reply":"2025-04-11T05:54:03.172352Z"}},"outputs":[],"execution_count":24},{"id":"471523a7-640b-4c0a-b109-2fa454e5368a","cell_type":"code","source":"def collaborative_filtering_recommender(df, user_id, k=100, top_n=5):\n    user_movie_matrix = df.pivot_table(index='userId', columns='title', values='rating').fillna(0)\n\n    # Convert to sparse matrix to reduce memory usage\n    sparse_matrix = csr_matrix(user_movie_matrix.values)\n\n    # Compute cosine similarity (efficient for sparse matrix)\n    user_similarity = cosine_similarity(sparse_matrix)\n\n    user_similarity_df = pd.DataFrame(user_similarity, index=user_movie_matrix.index, columns=user_movie_matrix.index)\n\n    if user_id not in user_movie_matrix.index:\n        print(f\"User {user_id} not found.\")\n        return pd.DataFrame()\n\n    similar_users = user_similarity_df[user_id].sort_values(ascending=False)[1:k+1].index\n    similar_users_ratings = user_movie_matrix.loc[similar_users]\n    mean_ratings = similar_users_ratings.mean(axis=0)\n\n    user_rated_movies = user_movie_matrix.loc[user_id]\n    movies_to_recommend = mean_ratings[user_rated_movies == 0]\n\n    top_recommendations = movies_to_recommend.sort_values(ascending=False).head(top_n)\n\n    return pd.DataFrame({\n        'title': top_recommendations.index,\n        'predicted_rating': top_recommendations.values\n    })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.174300Z","iopub.execute_input":"2025-04-11T05:54:03.174554Z","iopub.status.idle":"2025-04-11T05:54:03.196404Z","shell.execute_reply.started":"2025-04-11T05:54:03.174536Z","shell.execute_reply":"2025-04-11T05:54:03.195349Z"}},"outputs":[],"execution_count":25},{"id":"620af40e-60cd-4f33-a8d4-2e84cfa49a27","cell_type":"code","source":"# Use only a subset of users and movies (for testing)\ndf_subset = df[df['userId'] <= 100]  # or use random.sample\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.197643Z","iopub.execute_input":"2025-04-11T05:54:03.197923Z","iopub.status.idle":"2025-04-11T05:54:03.222296Z","shell.execute_reply.started":"2025-04-11T05:54:03.197903Z","shell.execute_reply":"2025-04-11T05:54:03.221244Z"}},"outputs":[],"execution_count":26},{"id":"0baec8ba-52e5-4957-935b-219b03be62a7","cell_type":"code","source":"df_subset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.223726Z","iopub.execute_input":"2025-04-11T05:54:03.224321Z","iopub.status.idle":"2025-04-11T05:54:03.251656Z","shell.execute_reply.started":"2025-04-11T05:54:03.224288Z","shell.execute_reply":"2025-04-11T05:54:03.250386Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"       userId  movieId  rating   timestamp  \\\n0           1       16     4.0  1217897793   \n1           1       24     1.5  1217895807   \n2           1       32     4.0  1217896246   \n3           1       47     4.0  1217896556   \n4           1       50     4.0  1217896523   \n...       ...      ...     ...         ...   \n11344     100     5952     4.5  1116728307   \n11345     100     6358     0.5  1116728483   \n11346     100     6743     2.5  1116728489   \n11347     100     6753     4.0  1116728678   \n11348     100     7153     5.0  1116728791   \n\n                                                   title  \\\n0                                          Casino (1995)   \n1                                          Powder (1995)   \n2              Twelve Monkeys (a.k.a. 12 Monkeys) (1995)   \n3                            Seven (a.k.a. Se7en) (1995)   \n4                             Usual Suspects, The (1995)   \n...                                                  ...   \n11344      Lord of the Rings: The Two Towers, The (2002)   \n11345                                Kiss Me Kate (1953)   \n11346                                 Jungle Book (1942)   \n11347                            Secondhand Lions (2003)   \n11348  Lord of the Rings: The Return of the King, The...   \n\n                               genres  \n0                         Crime|Drama  \n1                        Drama|Sci-Fi  \n2             Mystery|Sci-Fi|Thriller  \n3                    Mystery|Thriller  \n4              Crime|Mystery|Thriller  \n...                               ...  \n11344               Adventure|Fantasy  \n11345          Comedy|Musical|Romance  \n11346               Adventure|Fantasy  \n11347           Children|Comedy|Drama  \n11348  Action|Adventure|Drama|Fantasy  \n\n[11349 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>userId</th>\n      <th>movieId</th>\n      <th>rating</th>\n      <th>timestamp</th>\n      <th>title</th>\n      <th>genres</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>16</td>\n      <td>4.0</td>\n      <td>1217897793</td>\n      <td>Casino (1995)</td>\n      <td>Crime|Drama</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>24</td>\n      <td>1.5</td>\n      <td>1217895807</td>\n      <td>Powder (1995)</td>\n      <td>Drama|Sci-Fi</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>32</td>\n      <td>4.0</td>\n      <td>1217896246</td>\n      <td>Twelve Monkeys (a.k.a. 12 Monkeys) (1995)</td>\n      <td>Mystery|Sci-Fi|Thriller</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>47</td>\n      <td>4.0</td>\n      <td>1217896556</td>\n      <td>Seven (a.k.a. Se7en) (1995)</td>\n      <td>Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>50</td>\n      <td>4.0</td>\n      <td>1217896523</td>\n      <td>Usual Suspects, The (1995)</td>\n      <td>Crime|Mystery|Thriller</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>11344</th>\n      <td>100</td>\n      <td>5952</td>\n      <td>4.5</td>\n      <td>1116728307</td>\n      <td>Lord of the Rings: The Two Towers, The (2002)</td>\n      <td>Adventure|Fantasy</td>\n    </tr>\n    <tr>\n      <th>11345</th>\n      <td>100</td>\n      <td>6358</td>\n      <td>0.5</td>\n      <td>1116728483</td>\n      <td>Kiss Me Kate (1953)</td>\n      <td>Comedy|Musical|Romance</td>\n    </tr>\n    <tr>\n      <th>11346</th>\n      <td>100</td>\n      <td>6743</td>\n      <td>2.5</td>\n      <td>1116728489</td>\n      <td>Jungle Book (1942)</td>\n      <td>Adventure|Fantasy</td>\n    </tr>\n    <tr>\n      <th>11347</th>\n      <td>100</td>\n      <td>6753</td>\n      <td>4.0</td>\n      <td>1116728678</td>\n      <td>Secondhand Lions (2003)</td>\n      <td>Children|Comedy|Drama</td>\n    </tr>\n    <tr>\n      <th>11348</th>\n      <td>100</td>\n      <td>7153</td>\n      <td>5.0</td>\n      <td>1116728791</td>\n      <td>Lord of the Rings: The Return of the King, The...</td>\n      <td>Action|Adventure|Drama|Fantasy</td>\n    </tr>\n  </tbody>\n</table>\n<p>11349 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":27},{"id":"a92cb1cd-3660-4e51-ba46-0ad0bff1358a","cell_type":"code","source":"# Example usage:\ncollaborative_filtering_recommender(df, user_id=9, k=50, top_n=5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.253081Z","iopub.execute_input":"2025-04-11T05:54:03.253853Z","iopub.status.idle":"2025-04-11T05:54:03.801145Z","shell.execute_reply.started":"2025-04-11T05:54:03.253822Z","shell.execute_reply":"2025-04-11T05:54:03.799828Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"                            title  predicted_rating\n0                 Outbreak (1995)              2.56\n1           Lion King, The (1994)              2.28\n2                  Aladdin (1992)              2.12\n3  While You Were Sleeping (1995)              2.04\n4     Beauty and the Beast (1991)              1.88","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>predicted_rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Outbreak (1995)</td>\n      <td>2.56</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Lion King, The (1994)</td>\n      <td>2.28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Aladdin (1992)</td>\n      <td>2.12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>While You Were Sleeping (1995)</td>\n      <td>2.04</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Beauty and the Beast (1991)</td>\n      <td>1.88</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":28},{"id":"25244a52-a257-40f8-a67a-eee20c8ee385","cell_type":"code","source":"import ipywidgets as widgets\nfrom IPython.display import display, clear_output","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.802322Z","iopub.execute_input":"2025-04-11T05:54:03.802772Z","iopub.status.idle":"2025-04-11T05:54:03.974162Z","shell.execute_reply.started":"2025-04-11T05:54:03.802745Z","shell.execute_reply":"2025-04-11T05:54:03.973025Z"}},"outputs":[],"execution_count":29},{"id":"59676a18-1dc0-4e9a-8b2c-44fb04c3f5e2","cell_type":"code","source":"import matplotlib.pyplot as plt","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.975211Z","iopub.execute_input":"2025-04-11T05:54:03.975495Z","iopub.status.idle":"2025-04-11T05:54:03.981264Z","shell.execute_reply.started":"2025-04-11T05:54:03.975473Z","shell.execute_reply":"2025-04-11T05:54:03.980083Z"}},"outputs":[],"execution_count":30},{"id":"c712061f-599a-47f8-a739-12d7570623cd","cell_type":"code","source":"# Widgets\nrecommender_type = widgets.Dropdown(\n    options=['Popularity', 'Collaborative'],\n    value='Popularity',\n    description='Method:'\n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:03.982472Z","iopub.execute_input":"2025-04-11T05:54:03.982809Z","iopub.status.idle":"2025-04-11T05:54:04.005977Z","shell.execute_reply.started":"2025-04-11T05:54:03.982779Z","shell.execute_reply":"2025-04-11T05:54:04.004881Z"}},"outputs":[],"execution_count":31},{"id":"4a8ed56c-351c-4665-8623-3272e71b37a8","cell_type":"code","source":"genre = widgets.Text(value='Comedy', description='Genre:')\nmin_ratings = widgets.IntText(value=100, description='Min Ratings:')\nmovie_title = widgets.Text(value='Toy Story', description='Movie Title:')\nuser_id = widgets.IntText(value=1, description='User ID:')\nk_users = widgets.IntText(value=100, description='Top K Users:')\ntop_n = widgets.IntSlider(value=5, min=1, max=20, description='Top N:')\n\noutput = widgets.Output()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:04.007147Z","iopub.execute_input":"2025-04-11T05:54:04.007889Z","iopub.status.idle":"2025-04-11T05:54:04.042859Z","shell.execute_reply.started":"2025-04-11T05:54:04.007859Z","shell.execute_reply":"2025-04-11T05:54:04.041691Z"}},"outputs":[],"execution_count":32},{"id":"99e9aec0-b4fb-49ea-a2c4-04cdb4fc0f14","cell_type":"code","source":"def recommend_callback(change):\n    with output:\n        clear_output()\n        method = recommender_type.value\n\n        if method == 'Popularity':\n            result = popularity_based_recommender(df, genre.value, min_ratings.value, top_n.value)\n        elif method == 'Collaborative':\n            result = collaborative_filtering_recommender(df, user_id.value, k_users.value, top_n.value)\n        else:\n            result = pd.DataFrame()\n\n        if not result.empty:\n            display(result)\n\n            # Bar chart if ratings are available\n            if 'predicted_rating' in result.columns or 'avg_rating' in result.columns:\n                col = 'predicted_rating' if 'predicted_rating' in result.columns else 'avg_rating'\n                plt.figure(figsize=(10, 5))\n                plt.barh(result['title'][::-1], result[col][::-1], color='skyblue')\n                plt.xlabel('Rating')\n                plt.title(f\"Top {top_n.value} Recommendations ({method} Based)\")\n                plt.grid(axis='x', linestyle='--', alpha=0.6)\n                plt.tight_layout()\n                plt.show()\n        else:\n            print(\"No results to show. Please check your inputs.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:04.044156Z","iopub.execute_input":"2025-04-11T05:54:04.045179Z","iopub.status.idle":"2025-04-11T05:54:04.080018Z","shell.execute_reply.started":"2025-04-11T05:54:04.045141Z","shell.execute_reply":"2025-04-11T05:54:04.078929Z"}},"outputs":[],"execution_count":33},{"id":"7cb33405-e58c-4786-8a60-134ca064fc68","cell_type":"code","source":"recommend_button = widgets.Button(description=\"Recommend\")\nrecommend_button.on_click(recommend_callback)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:04.081287Z","iopub.execute_input":"2025-04-11T05:54:04.081633Z","iopub.status.idle":"2025-04-11T05:54:04.104743Z","shell.execute_reply.started":"2025-04-11T05:54:04.081560Z","shell.execute_reply":"2025-04-11T05:54:04.103440Z"}},"outputs":[],"execution_count":34},{"id":"ee030599-968b-4b49-911e-fab7ead6e970","cell_type":"code","source":"# Layout\ninput_ui = widgets.VBox([\n    recommender_type,\n    genre,\n    min_ratings,\n    user_id,\n    k_users,\n    top_n,\n    recommend_button,\n    output\n])\n\ndisplay(input_ui)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-11T05:54:04.105841Z","iopub.execute_input":"2025-04-11T05:54:04.106126Z","iopub.status.idle":"2025-04-11T05:54:04.131183Z","shell.execute_reply.started":"2025-04-11T05:54:04.106104Z","shell.execute_reply":"2025-04-11T05:54:04.129823Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(Dropdown(description='Method:', options=('Popularity', 'Collaborative'), value='Popularity'), T…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"671030b9ff6c4a3ca5f403d4ca6bb234"}},"metadata":{}}],"execution_count":35},{"id":"0c88a44b-69ca-4f51-b6c6-6b1d7bb51256","cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"id":"c7eb6447-863a-4775-be4b-b4bc60d9ee35","cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"id":"cb2b9d5f-75fc-4195-9a2c-83361ed04270","cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}